---
description: 
globs: 
alwaysApply: false
---
# Fight the Landlord Card Game - Development Guide

## Project Overview
This is a web-based "Fight the Landlord" (Dou Dizhu) card game implemented in HTML, CSS, and JavaScript. The game features authentic Fight the Landlord mechanics with a complete bidding system, proper card rankings, and a futuristic tech-themed dark interface with responsive design for all devices.

## Game Rules & Mechanics

### Core Game Structure
- **Players**: 3 players total (1 human, 2 AI)
- **Deck**: Standard 54-card deck (52 regular cards + 2 jokers)
- **Deal**: 17 cards per player (51 total) + 3 bonus cards for landlord
- **Roles**: Landlord (1 player, plays solo) vs Peasants (2 players, cooperate)

### Card Rankings (Fight the Landlord Order)
3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < J < Q < K < A < 2 < Small Joker < Big Joker

### Bidding System
- Players bid in clockwise order: 1, 2, or 3 points (or pass)
- Highest bidder becomes landlord
- If all pass → redeal cards
- Landlord receives 3 bonus cards (total 20 cards)
- Base score equals bid amount (1-3 points)

### Valid Card Combinations
- **Single**: Any single card
- **Pair**: Two cards of same rank
- **Three of a Kind**: Three cards of same rank
- **Three + Single**: Three-of-a-kind + one extra card
- **Three + Pair**: Three-of-a-kind + one pair
- **Sequence**: ≥5 consecutive singles (A/2 not allowed)
- **Pair Sequence**: ≥3 consecutive pairs (A/2 not allowed)
- **Triplet Sequence**: ≥2 consecutive three-of-a-kinds
- **Bomb**: Four cards of same rank (beats non-rockets)
- **Rocket**: Both jokers (beats everything)

### Win Conditions
- **Landlord wins**: Plays all cards first
- **Peasants win**: Either peasant empties hand first

## File Structure
- [index.html](mdc:index.html) - Main game interface with 3-player grid layout and 3D dragon viewer
- [main.js](mdc:main.js) - Game initialization and dragon viewer integration
- [game.js](mdc:game.js) - Complete Fight the Landlord game logic and AI
- [dragon-viewer.js](mdc:dragon-viewer.js) - 3D dragon model viewer class (legacy fallback)
- [server.js](mdc:server.js) - Node.js server with binary file support for GLB models
- [css/style.css](mdc:css/style.css) - Main CSS import file for modular architecture
- [css/layout.css](mdc:css/layout.css) - Layout system including 3D dragon viewer positioning
- [task.md](mdc:task.md) - Development progress tracking and feature documentation
- `images/` folder - Card images + dragon.glb (15.6MB) + background/audio assets
- `dragon_tests/` folder - Dragon integration testing and documentation

## JavaScript Architecture

### Main Game Class: `DouDiZhuGame`
```javascript
class DouDiZhuGame {
  constructor() {
    // Game state management
    this.gamePhase = 'bidding' | 'playing' | 'ended';
    this.players = [...]; // 3 players with roles and cards
    this.landlord = -1; // Index of landlord player
    this.currentPlayer = 0; // Current turn
    
    // Bidding system
    this.currentBidder = 0;
    this.currentBid = 0; // 0-3 points
    this.highestBidder = -1;
    this.baseScore = 0;
    
    // Card system
    this.deck = []; // 54-card deck
    this.landlordCards = []; // 3 bonus cards
    this.cardImages = {}; // Short name mapping
  }
}
```

### Key Methods Implementation
- **`createDeck()`**: Creates 54-card deck with proper rankings
- **`dealCards()`**: Deals 17 cards per player + 3 bonus cards
- **`startBidding()`**: Initiates bidding phase with AI logic
- **`makeBid(points)`**: Handles human/AI bidding with validation
- **`evaluateHandStrength()`**: AI bidding strategy based on card strength
- **`endBidding()`**: Assigns roles and starts playing phase
- **`isValidCardCombination()`**: Validates Fight the Landlord card types
- **`canBeatLastPlay()`**: Checks if cards can beat previous play

### Card System Implementation
```javascript
// Card value mapping for Fight the Landlord ranking
getCardValue(rank) {
  const values = {
    '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10,
    'J': 11, 'Q': 12, 'K': 13, 'A': 14, '2': 15,
    'Small Joker': 16, 'Big Joker': 17
  };
  return values[rank] || 0;
}

// Short name mapping for card images
getCardImageKey(card) {
  if (card.rank === 'Small Joker') return 'joker_small';
  if (card.rank === 'Big Joker') return 'joker_big';
  
  const suitMap = {'♠': 'spade', '♥': 'heart', '♣': 'club', '♦': 'diamond'};
  const rankMap = { 'J': 'j', 'Q': 'q', 'K': 'k', 'A': 'a', '10': '10', '2': '2' };
  
  return `${suitMap[card.suit]}_${rankMap[card.rank] || card.rank}`;
}
```

## Design System & Color Principles

### Futuristic Tech Theme
- **Dark Atmosphere**: Deep blue gradient background (#0a0e27 → #1a1d3a) with tech grid overlay
- **Neon Accents**: Cyan/blue (#00d9ff, #3b82f6) for interactive elements and highlights
- **Glow Effects**: Amber gold (#f59e0b) for important states and role indicators
- **Glassmorphism**: Semi-transparent containers with backdrop blur effects

### CSS Variables System
All colors and effects are managed through CSS variables in [style.css](mdc:style.css):
```css
:root {
  /* Dark tech atmosphere */
  --bg-gradient-start: #0a0e27;
  --bg-gradient-end: #1a1d3a;
  --container-bg: rgba(15, 23, 42, 0.9);
  
  /* Tech colors */
  --color-primary: #3b82f6;
  --color-tech-cyan: #00d9ff;
  --color-accent: #f59e0b;
  
  /* High contrast text */
  --text-primary: #f8fafc;
  --text-secondary: #cbd5e1;
  
  /* Tech effects */
  --shadow-neon: 0 0 20px rgba(0, 217, 255, 0.5);
  --glow-primary: 0 0 10px rgba(59, 130, 246, 0.6);
  
  /* Responsive variables */
  --card-width: clamp(60px, 8vw, 80px);
  --card-height: clamp(84px, 11.2vw, 112px);
  --spacing-sm: clamp(0.5rem, 2vw, 1rem);
  --spacing-md: clamp(1rem, 3vw, 1.5rem);
}
```

### Responsive Design Implementation
- **Mobile-first approach**: 5 distinct breakpoints (320px, 481px, 769px, 1025px, 1400px)
- **Fluid typography**: Using clamp() functions for scalable text
- **Adaptive layouts**: Grid layouts adapt for each screen size
- **Touch-friendly**: Minimum 44px touch targets, enhanced card selection
- **Performance optimized**: Disabled heavy animations on mobile devices

### Visual Effects & Animations
- **Shimmer Effect**: Moving light animation on computer card backs
- **Pulse Glow**: Breathing light effect on landlord role indicators
- **Neon Shadows**: Cyan glow effects on hover states
- **Tech Grid**: Background pattern overlay for sci-fi atmosphere
- **Backdrop Filters**: Glassmorphism blur effects on all containers

## Player Layout & Positioning
- **Player 1 (Human)**: Bottom position with overlapping cards, selection mechanics
- **Computer 1**: Left position (vertical layout) with contained card display
- **Computer 2**: Top position (horizontal layout) with card fanning effects

## Card System Implementation

### Card Image Naming
- Short names: `{suit}{rank}.png` (e.g., `sa.png` for Spades Ace, `ht.png` for Hearts Ten)
- Suits: s(spades), h(hearts), c(clubs), d(diamonds)
- Ranks: a,2-9,t(ten),j,q,k
- Jokers: `jr.png` (red), `jb.png` (black)

### Card Overlapping System
- **Computer players**: Enhanced overlapping with mathematical positioning
- **Human player**: Overlapping with selection mechanics preserved
- **Hover effects**: Tech-themed scale and neon glow effects without layout disruption

### Card Rendering Logic
```javascript
renderComputerCards(playerIndex, containerId) {
  // Enhanced overlapping with mathematical positioning
  const isVertical = containerId === 'player1';
  const totalCards = Math.min(cardCount, 15);
  
  // Dynamic overlap adjustment based on card count
  const baseOverlap = isVertical ? -50 : -45;
  const overlapVariation = Math.max(-15, cardCount * -2);
  const finalOverlap = baseOverlap + overlapVariation;
  
  // Natural arc/rotation effects for realistic card fanning
  const maxRotation = Math.min(15, totalCards * 1.5);
  const rotation = (cardIndex / (totalCards - 1) - 0.5) * maxRotation;
}
```

## Game State Management

### Bidding Phase Implementation
```javascript
// Bidding system with AI strategy
showBiddingButtons() {
  // Dynamic bidding buttons based on current bid
  for (let i = this.currentBid + 1; i <= 3; i++) {
    // Create "Bid {i}" buttons
  }
  // Add "Pass" button
}

aiBid() {
  const strength = this.evaluateHandStrength(cards);
  const bidProbability = this.calculateBidProbability(strength, this.currentBid);
  const shouldBid = Math.random() < bidProbability;
}

evaluateHandStrength(cards) {
  // AI evaluates hand based on:
  // - High cards (A, 2, Jokers) 
  // - Pairs, triplets, bombs
  // - Card distribution and potential combinations
}
```

### Playing Phase Mechanics
- **Turn management**: Clockwise rotation with proper skip logic
- **Card validation**: Validates Fight the Landlord combinations
- **AI strategy**: Simple but effective AI for computer players
- **Win detection**: Proper landlord vs peasant victory conditions

## Key Implementation Patterns

### Tech Theme Elements
- **Containers**: Dark semi-transparent backgrounds with blue borders and blur effects
- **Animations**: Shimmer, pulse-glow, and enhanced hover transitions
- **Interactive States**: Neon cyan borders and glow effects on hover/selection
- **Typography**: High contrast white text with optional glow effects

### Card Containment
Computer 1 cards must stay within their designated region:
- CSS: `overflow: hidden` on `.player-left .player-cards`
- JavaScript: Reduced horizontal offsets and removed translateX on hover

### Player Info Visibility
Player name labels are hidden:
- CSS: `.player-info { display: none; }`

### Interactive States
- **Hover**: Scale transforms with neon glow shadows
- **Selection**: Amber accent highlighting with enhanced glow effects
- **Disabled**: Darkened states with reduced opacity maintaining theme consistency

## Development Guidelines

### When Adding New Game Features:
1. Follow Fight the Landlord rules strictly
2. Update card validation logic in `isValidCardCombination()`
3. Enhance AI strategy in `evaluateHandStrength()` and `findValidAICards()`
4. Maintain proper game state transitions (bidding → playing → ended)
5. Test with different card combinations and scenarios

### When Adding UI Features:
1. Follow the established tech theme using CSS variables
2. Maintain high contrast accessibility requirements for dark theme
3. Use neon/glow effects consistently for interactive feedback
4. Ensure responsive behavior across all breakpoints
5. Update [task.md](mdc:task.md) with progress tracking

### CSS Modifications:
- Use existing CSS variables for tech theme consistency
- Follow shadow/glow effect patterns (--shadow-neon, --glow-primary)
- Implement responsive design with mobile-first approach
- Add subtle animations for enhanced tech feel
- Use clamp() for fluid sizing and spacing

### JavaScript Changes:
- Maintain Fight the Landlord game logic accuracy
- Card positioning logic is in `renderComputerCards()` method
- Hover effects are managed through event listeners
- Image mapping system uses `cardImages` object with short names
- Bidding system in `startBidding()`, `makeBid()`, `passBid()` methods

## Testing Considerations
- **Game Logic**: Test all Fight the Landlord card combinations
- **Bidding System**: Test AI bidding behavior and edge cases
- **Card Validation**: Verify proper card comparison and type validation
- **Responsive Design**: Test across mobile, tablet, and desktop devices
- **Performance**: Verify smooth animations and transitions
- **Accessibility**: Ensure high contrast and touch-friendly interactions
- **AI Behavior**: Test computer player strategies and decision making

## Common Issues & Solutions
- **Card overflow**: Check container `overflow: hidden` and JavaScript positioning
- **Bidding logic**: Ensure proper turn management and bid validation
- **Game state bugs**: Verify phase transitions and state resets
- **Theme consistency**: Use CSS variables instead of hardcoded colors
- **Responsive issues**: Test fluid sizing with clamp() functions
- **Performance**: Use CSS transforms and backdrop-filter for smooth animations

## 3D Dragon Integration

### Dragon Model Specifications
- **File**: `dragon.glb` (15.6MB Binary GLB format)
- **Position**: Fixed positioning in right viewport area (700×850px)
- **Scale**: 3.5x magnification for spectacular display
- **Background**: Completely transparent overlay on Black Myth Wukong theme
- **Responsive**: Adaptive sizing across multiple breakpoints

### Three.js Implementation
```javascript
// ES6 Module Loading (Proven Reliable Method)
const THREE = await import('https://unpkg.com/three@0.155.0/build/three.module.js');
const { GLTFLoader } = await import('https://unpkg.com/three@0.155.0/examples/jsm/loaders/GLTFLoader.js');
const { OrbitControls } = await import('https://unpkg.com/three@0.155.0/examples/jsm/controls/OrbitControls.js');

// WebGL Renderer with Alpha Channel
const renderer = new THREE.WebGLRenderer({ 
  canvas: canvas, 
  alpha: true, 
  antialias: true,
  premultipliedAlpha: false,
  preserveDrawingBuffer: true
});
renderer.setClearColor(0x000000, 0); // Completely transparent background
```

### Interactive Controls System
- **Drag-to-Rotate**: Left mouse drag for camera orbit around dragon
- **Zoom Control**: Mouse wheel for smooth zoom in/out (4-25 distance range)
- **Smooth Damping**: Enhanced camera movements with dampingFactor: 0.05
- **Auto-Rotation**: Gentle rotation and floating animation when not interacting
- **Touch Support**: Mobile-compatible OrbitControls for cross-device interaction

### Lighting & Visual Effects
```javascript
// Multi-Light Setup for Dramatic Dragon Visualization
const ambientLight = new THREE.AmbientLight(0x404040, 0.8);
const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2);
const pointLight = new THREE.PointLight(0xff6600, 1.0, 100);

// Enhanced Material Properties
dragon.traverse((child) => {
  if (child.isMesh && child.material) {
    child.material.emissive = new THREE.Color(0x221100);
    child.material.emissiveIntensity = 0.2;
    child.castShadow = true;
    child.receiveShadow = true;
  }
});
```

### Dragon Viewer CSS Architecture
```css
.dragon-viewer {
  position: fixed;
  top: 5%;
  right: 1vw;
  width: 700px;
  height: 850px;
  z-index: 50;
  border-radius: 20px;
  background: transparent; /* Complete transparency for background overlay */
}

/* Responsive Breakpoints */
@media (max-width: 1600px) { width: 600px; height: 750px; }
@media (max-width: 1400px) { width: 500px; height: 650px; }
@media (max-width: 1200px) { width: 400px; height: 520px; }
@media (max-width: 768px) { display: none; } /* Mobile optimization */
```

### Server Binary File Support
```javascript
// Enhanced server.js for GLB file serving
if (isBinaryFile) {
  res.setHeader('Content-Type', getMimeType(ext));
  res.setHeader('Content-Length', data.length);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.end(data); // Binary data handling
}

// MIME Type Support
'.glb': 'model/gltf-binary',
'.png': 'image/png',
'.mp3': 'audio/mpeg'
```

### Dragon Testing Infrastructure
- **`dragon_tests/` Directory**: Comprehensive testing environment
- **Multiple Test Files**: Various approaches to GLTFLoader testing
- **Documentation**: Complete implementation guide and troubleshooting
- **Proven Methods**: ES6 modules confirmed reliable vs CDN failures
- **File Verification**: Tools to confirm dragon.glb accessibility





