---
description: 
globs: 
alwaysApply: false
---
# Development Priorities

## Immediate Next Steps

### 1. Display Full Card Hands (High Priority)
**Current State**: Cards limited to 15 per player with "+X more cards" indicator
**Required**: Show all 3-20 cards for complete game transparency

**Implementation Plan**:
1. Modify `renderComputerCards()` in [game.js](mdc:game.js):
   - Remove `maxDisplayCards` limit (line 310)
   - Delete more-cards-indicator creation logic (lines 425-433)
2. Enhance overlap algorithms for dynamic card counts:
   - Vertical layout: adjust baseOverlap based on cardCount for optimal stacking
   - Horizontal layout: adjust baseOverlap based on cardCount for optimal spreading
3. Update CSS in [cards.css](mdc:cards.css):
   - Remove `.more-cards-indicator` styles
   - Optimize overlap margins for 3-20 card scenarios
4. Test responsive behavior across all breakpoints in [responsive.css](mdc:responsive.css)

### 2. Enhanced Score System (Medium Priority)
**Current**: Basic win/loss without scoring details
**Needed**: Comprehensive scoring based on:
- Bidding points (1x, 2x, 3x multipliers)
- Bomb usage bonuses (+2 points per bomb)
- Rocket usage bonuses (+4 points per rocket)
- Role performance tracking (landlord vs peasants)
- Score history and statistics display

**Implementation Plan**:
1. Add scoring logic to [game.js](mdc:game.js):
   - Create `calculateScore()` method
   - Track bombs and rockets used during gameplay
   - Implement multiplier system based on bid points
2. Update UI in [index.html](mdc:index.html) and [ui-components.css](mdc:ui-components.css):
   - Add score display area
   - Create score history modal
   - Show round results with breakdown

### 3. Advanced Card Combinations (Low Priority)
**Current**: Basic combinations implemented (singles, pairs, sequences, bombs, rockets)
**Missing**: Complex combinations from traditional Fight the Landlord:
- Airplane with wings (consecutive triples with single/pair attachments)
- Quad with attachments (four-of-a-kind + 2 singles or 2 pairs)

**Implementation Plan**:
1. Enhance `isValidCardCombination()` in [game.js](mdc:game.js)
2. Update AI logic to recognize and play advanced combinations
3. Add combination validation for airplane and quad variations

## Code Quality Improvements

### Modular CSS Maintenance
**Current**: 6-module CSS architecture successfully implemented
**Focus**: Maintain clean separation when adding new features
- [variables.css](mdc:variables.css) - Color system and responsive variables
- [layout.css](mdc:layout.css) - Main containers and grid system
- [players.css](mdc:players.css) - Player styling and role themes
- [cards.css](mdc:cards.css) - Card interactions and overlapping
- [ui-components.css](mdc:ui-components.css) - Buttons and modals
- [responsive.css](mdc:responsive.css) - Mobile-first breakpoints

### AI Enhancement Opportunities
- Improve AI bidding strategy based on hand strength evaluation
- Better card selection logic for complex combinations
- Strategic gameplay decisions (when to use bombs/rockets)
- Cooperative play between peasant AI players

### UI/UX Polish
- Animation for card plays and transitions
- Enhanced visual feedback for invalid plays
- Improved mobile touch interactions
- Sound effects integration with Web Audio API
- Loading states and error handling

### Testing & Performance
- Add comprehensive tests in `tests/` directory
- Test complex card combination logic
- Performance optimization for mobile devices
- Cross-browser compatibility testing

## Architecture Guidelines

### CSS Module Management
- Follow established modular structure when adding styles
- Test across all responsive breakpoints (320px-1400px+)
- Maintain tech-themed visual consistency
- Ensure accessibility standards (WCAG guidelines)

### Game Logic Separation
- Keep core game mechanics in [game.js](mdc:game.js) `DouDiZhuGame` class
- UI updates handled through dedicated render methods
- Maintain card image mapping system for asset flexibility
- Server configuration in [server.js](mdc:server.js) handles all static assets

### Development Workflow
- Use [task.md](mdc:task.md) for progress tracking
- Update modular CSS files based on functionality
- Test responsive design after each feature addition
- Maintain the tech-themed dark interface with Wukong background

## Current Game Status
âœ… **Completed Features:**
- Bidding system with AI strategy
- Complete card combination validation  
- Modular CSS architecture (6 files, 1,353 total lines)
- Tech-themed interface with Wukong background
- Overlapping card system for realistic hands
- Mobile-first responsive design (5 breakpoints)

ðŸ”„ **In Progress:**
- Full card hand display (remove 15-card limit)
- Enhanced scoring system with multipliers
- Advanced card combinations

ðŸš€ **Future Enhancements:**
- Online multiplayer support
- Tournament mode
- Advanced AI difficulty levels

